<?xml version="1.0" encoding="utf-8"?>
<!-- -*- coding: utf-8; mode: SGML -*- -->
<Kratos_data version='9.0.1'>
	<style show_menubutton_about='0' show_menubutton_search='1'></style>
	<groups/>
	<units></units>
	<!-- Fill this fields to automatically active an App without the init window -->
	<hiddenfield n="activeapp" active="0" v="" state="disabled"/>
	<value n="nDim" pn="Dimension" un="nDim" v="undefined" state="disabled" values="undefined,2D,2Da,3D" dict="undefined,Undefined,2D,2D,2Da,2D axisymmetric,3D,3D"/>
	<appLink n="ThermicLauncher" public="1" pn="Thermic" active="0" appid="ThermicLauncher" prefix="ThermicLauncher"/>
	<appLink n="ConvectionDiffusion" public="0" pn="Convection-diffusion" active="0" appid="ConvectionDiffusion" prefix="CNVDFF"/>
	<appLink n="Structural" public="1" pn="Structural" active="0" appid="Structural" prefix="ST"/>
	<appLink n="FluidLauncher" public="1" pn="Fluid" active="0" appid="FluidLauncher" prefix="FLL"/>
	<appLink n="Fluid" public="0" pn="Fluid" active="0" appid="Fluid" prefix="FL"/>
	<appLink n="CompressibleFluid" public="0" pn="Compressible Fluid" active="0" appid="CompressibleFluid" prefix="CF"/>
	<appLink n="EmbeddedFluid" public="0" pn="Embedded fluid" active="0" appid="EmbeddedFluid" prefix="EMBFL"/>
	<appLink n="PotentialFluid" public="0" pn="Potential fluid" active="0" appid="PotentialFluid" prefix="PTFL"/>
	<appLink n="Buoyancy" public="0" pn="Buoyancy" active="0" appid="Buoyancy" prefix="Buoyancy_"/>
	<appLink n="ConjugateHeatTransfer" public="0" pn="Conjugate heat transfer" active="0" appid="ConjugateHeatTransfer" prefix="CHT"/>
	<appLink n="FSI" public="1" pn="FSI" active="0" appid="FSI" prefix="FSI"/>
	<appLink n="Dam" public="1" pn="Dam" active="0" appid="Dam" prefix="Dam"/>
	<appLink n="PfemLauncher" public="1" pn="Pfem" active="0" appid="PfemLauncher" prefix="PFEMLauncher_"/>
	<appLink n="PfemFluid" public="0" pn="Pfem Fluid" active="0" appid="PfemFluid" prefix="PFEMFLUID_"/>
	<appLink n="PfemThermic" public="0" pn="Pfem Thermic" active="0" appid="PfemThermic" prefix="PFEMTHERMIC_"/>
	<appLink n="StenosisWizard" public="1" pn="Stenosis Wizard" active="0" appid="StenosisWizard" prefix="StenosisWizard" is_tool="1"/>
	<appLink n="Stent" public="1" pn="Stent" active="0" appid="Stent" prefix="Stent" is_tool="1"/>
	<appLink n="DEMLauncher" public="1" pn="DEM" active="0" appid="DEMLauncher" prefix="DEMLauncher"/>
	<appLink n="DEM" public="0" pn="DEM" active="0" appid="DEM" prefix="DEM"/>
	<appLink n="FluidDEM" public="0" pn="Fluid-DEM" active="0" appid="FluidDEM" prefix="FluidDEM"/>
	<appLink n="MPM" public="1" pn="MPM" active="0" appid="MPM" prefix="MPM"/>
	<appLink n="DEMPFEM" public="0" pn="DEM+PFEM" active="0" appid="DEMPFEM" prefix="DEMPFEM"/>
	<appLink n="CDEM" public="0" pn="Cohesive DEM" active="0" appid="CDEM" prefix="CDEM"/>
	<appLink n="ShallowWater" public="1" pn="Shallow water" active="0" appid="ShallowWater" prefix="SW"/>
	<appLink n="MdpaGenerator" public="1" pn="Mdpa Generator" active="0" appid="MdpaGenerator" prefix="MDPAGen_" is_tool="1"/>
	<appLink n="Examples" public="1" pn="Examples" active="0" appid="Examples" prefix="EXA_" is_tool="1"/>
	<blockdata n="units" pn="Units" icon="units" open_window="0">
		<value n='units_mesh' pn='Mesh units' unit_mesh_definition="1"/>
		<value n='units_system' pn='Units system' units_system_definition="1">
			<dependencies node="//*[@unit_definition or @unit_mesh_definition='1']" att1='change_units_system' v1='{@v}'/>
		</value>
	</blockdata>
	<procs>
		<proc n='UpdateParts' args='args'>
			<![CDATA[
				return [spdAux::ProcUpdateParts $domNode $args]
			]]>
		</proc>
		<proc n='OkNewCondition' args='args'>
			<![CDATA[
				return [spdAux::ProcOkNewCondition $domNode $args]
			]]>
		</proc>
		<proc n='GetElements' args='args'>
			<![CDATA[
				return [spdAux::ProcGetElements $domNode $args]
			]]>
		</proc>
		<proc n='GetElementsDict' args='args'>
			<![CDATA[
				return [spdAux::ProcGetElementsDict $domNode $args]
			]]>
		</proc>
		<proc n='GetElementsValues' args='args'>
			<![CDATA[
				return [spdAux::ProcGetElementsValues $domNode $args]
			]]>
		</proc>
		<proc n='GetSolutionStrategies' args='args'>
			<![CDATA[
				return [spdAux::ProcGetSolutionStrategies $domNode $args]
			]]>
		</proc>
		<proc n='GetSchemes' args='args'>
			<![CDATA[
				return [spdAux::ProcGetSchemes $domNode $args]
			]]>
		</proc>
		<proc n='GetConstitutiveLaws' args='args'>
			<![CDATA[
				return [spdAux::ProcGetConstitutiveLaws $domNode $args]
			]]>
		</proc>
		<proc n='GetAllConstitutiveLaws' args='args'>
			<![CDATA[
				return [spdAux::ProcGetAllConstitutiveLaws $domNode $args]
			]]>
		</proc>
		<proc n='GetSolvers' args='args'>
			<![CDATA[
				return [spdAux::ProcGetSolvers $domNode $args]
			]]>
		</proc>
		<proc n='GetSolversValues' args='args'>
			<![CDATA[
				return [spdAux::ProcGetSolversValues $domNode $args]
			]]>
		</proc>
		<proc n='GetSolverParameterValues' args='args'>
			<![CDATA[
				return [spdAux::ProcGetSolverParameterValues $domNode $args]
			]]>
		</proc>
		<proc n='GetSolverParameterDict' args='args'>
			<![CDATA[
				return [spdAux::ProcGetSolverParameterDict $domNode $args]
			]]>
		</proc>
		<proc n='CheckNodalConditionState' args='args'>
			<![CDATA[
				return [spdAux::ProcCheckNodalConditionState $domNode $args]
			]]>
		</proc>
		<proc n='CheckNodalConditionOutputState' args='args'>
			<![CDATA[
				return [spdAux::ProcCheckNodalConditionOutputState $domNode $args]
			]]>
		</proc>
		<proc n='RefreshTree' args='args'>
			<![CDATA[
				spdAux::RequestRefresh
			]]>
		</proc>
		<proc n='checkStateByUniqueName' args='args'>
			<![CDATA[
				return [spdAux::ProccheckStateByUniqueName $domNode $args]
			]]>
		</proc>
		<proc n='SolverParamState' args='args'>
			<![CDATA[
				return [spdAux::ProcSolverParamState $domNode $args]
			]]>
		</proc>
		<proc n='PartParamValue' args='args'>
			<![CDATA[
				return [spdAux::ProcPartParamValue $domNode $args]
			]]>
		</proc>
		<proc n='GetParts' args='args'>
			<![CDATA[
				return [spdAux::ProcGetParts $domNode $args]
			]]>
		</proc>
		<proc n='PartParamState' args='args'>
			<![CDATA[
				return [spdAux::ProcPartParamState $domNode $args]
			]]>
		</proc>
		<proc n='SolverEntryState' args='args'>
			<![CDATA[
				return [spdAux::ProcSolverEntryState $domNode $args]
			]]>
		</proc>
		<proc n='CheckDimension' args='args'>
			<![CDATA[
				return [spdAux::ProcCheckDimension $domNode $args]
			]]>
		</proc>
		<proc n='getStateFromXPathValue' args='args'>
			<![CDATA[
				return [spdAux::ProcgetStateFromXPathValue $domNode $args]
			]]>
		</proc>
		<proc n='getStateFromXPathValueDisabled' args='args'>
			<![CDATA[
				return [spdAux::ProcgetStateFromXPathValueDisabled $domNode $args]
			]]>
		</proc>
		<proc n='get_materials_list_simple' args='args'>
			<![CDATA[
				return [spdAux::ProcGet_materials_list_simple $domNode {*}$args]
			]]>
		</proc>
		<proc n='give_materials_list' args='args'>
			<![CDATA[
				return [spdAux::ProcGetMaterialsList $domNode {*}$args]
			]]>
		</proc>
		<proc n='edit_database_list' args='args'>
			<![CDATA[
			if { $dict eq "" } {
					foreach node [[$domNode parent] selectNodes value|container/value] {
						dict set dict [$node @n] [get_domnode_attribute $node v]
						dict set dict_units [$node @n] [get_domnode_attribute $node units]
					}
				}
				spdAux::ProcEditDatabaseList $domNode $dict $dict_units $boundary_conds $args
				#return [spdAux::ProcEdit_database_list $domNode {*}$args]
			]]>
		</proc>
		<proc n='CambioMat' args='args'>
			<![CDATA[
				return [spdAux::ProcCambioMat $domNode $args]
			]]>
		</proc>
		<proc n='ConditionState' args='args'>
			<![CDATA[
				return [spdAux::ProcConditionState $domNode $args]
			]]>
		</proc>
		<proc n='ConditionParameterState' args='args'>
			<![CDATA[
				return [spdAux::ProcConditionParameterState $domNode $args]
			]]>
		</proc>
		<proc n='SolStratParamState' args='args'>
			<![CDATA[
				return [spdAux::ProcSolStratParamState $domNode $args]
			]]>
		</proc>
		<proc n='SchemeParamState' args='args'>
			<![CDATA[
				return [spdAux::ProcSchemeParamState $domNode $args]
			]]>
		</proc>
		<proc n='ConstLawOutputState' args='args'>
			<![CDATA[
				return [spdAux::ProcConstLawOutputState $domNode $args]
			]]>
		</proc>
		<proc n='ElementOutputState' args='args'>
			<![CDATA[
				return [spdAux::ProcElementOutputState $domNode $args]
			]]>
		</proc>
		<proc n='ActiveIfAnyPartState' args='args'>
			<![CDATA[
				return [spdAux::ProcActiveIfAnyPartState $domNode $args]
			]]>
		</proc>
		<proc n='ActiveIfRestartAvailable' args='args'>
			<![CDATA[
				return [spdAux::ProcActiveIfRestartAvailable $domNode $args]
			]]>
		</proc>
		<proc n='DisableIfUniqueName' args='args'>
			<![CDATA[
				catch {[get_domnode_attribute $domNode dict]}
				return [spdAux::ProcDisableIfUniqueName $domNode $args]
			]]>
		</proc>
		<proc n='HideIfUniqueName' args='args'>
			<![CDATA[
				catch {[get_domnode_attribute $domNode dict]}
				return [spdAux::ProcHideIfUniqueName $domNode $args]
			]]>
		</proc>
		<proc n='CheckGeometry' args='args'>
			<![CDATA[
				return [spdAux::ProcCheckGeometry $domNode $args]
			]]>
		</proc>
		<proc n='UpdateTree' args='args'>
			<![CDATA[
				gid_groups_conds::actualize_conditions_window
			]]>
		</proc>
		<proc n='DirectorVectorNonZero' args='args'>
			<![CDATA[
				return [spdAux::ProcDirectorVectorNonZero $domNode $args]
			]]>
		</proc>
		<proc n='ShowInMode' args='args'>
			<![CDATA[
				return [spdAux::ProcShowInMode $domNode $args]
			]]>
		</proc>
		<proc n='UpdateDictAndReturnState' args='args'>
			<![CDATA[
				set dict [spdAux::ProcGetConstitutiveLaws $domNode]
				$domNode setAttribute dict $dict
				set values [split [get_domnode_attribute $domNode values] ","]
				set value [get_domnode_attribute $domNode v]
				if {$value ni $values} {set value [lindex $values 0]; $domNode setAttribute v $value}
				return "normal"
			]]>
		</proc>
		<proc n='getIntervals' args='args'>
			<![CDATA[
				return [spdAux::ProcGetIntervals $domNode $args]
			]]>
		</proc>
		<proc n='getTimeFunctions' args='args'>
			<![CDATA[
				set lista [::spdAux::getTimeFunctions]
				if {[$domNode @v] eq "" || [$domNode @v] ni $lista} {
					$domNode setAttribute v [lindex $lista 0]
				}
				set res [spdAux::ListToValues $lista]
				return $res
			]]>
		</proc>
		<proc n='getFields' args='args'>
			<![CDATA[
				set lista [::spdAux::getFields]
				if {[$domNode @v] eq "" || [$domNode @v] ni $lista} {
					$domNode setAttribute v [lindex $lista 0]
				}
				set res [spdAux::ListToValues $lista]
				return $res
			]]>
		</proc>
		<proc n="loads_function_time" args="load_name">
			<![CDATA[
				return [spdAux::chk_loads_function_time $domNode $load_name]
		]]>
		</proc>
		<proc n="FileDict" args="args">
			<![CDATA[
				return [spdAux::ProcFileDict $domNode $args]
			]]>
		</proc>
		<proc n='AddFile' args='args'>
			<![CDATA[
				if {[get_domnode_attribute $domNode v] eq "- Add new file"} {
					spdAux::AddFile $domNode
				}
			]]>
		</proc>
		<proc n='GetFilesValues' args='args'>
			<![CDATA[
				return [spdAux::ProcGetFilesValues $domNode]
			]]>
		</proc>

		<proc n='GetMaterialsList' args='args'>
			<![CDATA[
				spdAux::ProcGetMaterialsList $domNode {*}$args
			]]>
		</proc>
		<proc n='EditDatabaseList' args='args'>
			<![CDATA[
				if { $dict eq "" } {
					foreach node [[$domNode parent] selectNodes value|container/value] {
						dict set dict [$node @n] [get_domnode_attribute $node v]
						dict set dict_units [$node @n] [get_domnode_attribute $node units]
					}
				}
				spdAux::ProcEditDatabaseList $domNode $dict $dict_units $boundary_conds $args
			]]>
		</proc>
		<dynamicnode command="spdAux::injectProcs" args=""/>
	</procs>
	<container n="files" state="hidden"></container>
	<container n="interval_groups" state="hidden"></container>
	<translations>
		<translation pn="User defined"/>
	</translations>
	<display_options frame_width="186"/>
	<blockdata n="Internal data" state="hidden">
		<value n="lognoter_file" v=""/>
	</blockdata>
</Kratos_data>
