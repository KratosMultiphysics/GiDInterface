<?xml version="1.0" encoding="utf-8"?>
<container n="Results" pn="Results" un="Results" state="normal" open="1" open_window="0" icon="results">
    <container n="OnElement" pn="On element" un="ElementResults" icon="triangle" help="Activate the results you want to see in the elements" state="[ActiveIfAnyPartState]" open_window="0">
        <dynamicnode command="spdAux::injectElementOutputs" args=""/>
        <dynamicnode command="spdAux::injectConstitutiveLawOutputs" args=""/>
    </container>
    <container n="OnNodes" pn="On nodes" un="NodalResults" icon="point3d" help="Activate the results you want to see in the nodes" open_window="1">
        <value n="PARTITION_INDEX" pn="Partition index" v="Yes" values="Yes,No" help="" state="[checkStateByUniqueName ParallelType MPI]"/>
        <dynamicnode command="spdAux::injectNodalConditionsOutputs" args=""/>
    </container>
    <container n="GiDOutput" pn="GiD-Output" un="GiDOutput" state="normal" open="1" open_window="0" icon="results">
        <value n="EnableGiDOutput" pn="Enable output" v="Yes" values="Yes,No" un="EnableGiDOutput" help="Writing output for GiD or not">
            <dependencies value="No" node="../container" att1="state" v1="hidden"/>
            <dependencies value="Yes" node="../container" att1="state" v1="normal"/>
        </value>
        <container n="GiDOptions" pn="Options" un="GiDOptions" help="GiD postprocess options" open_window="1" icon="options">
            <value n="FolderName" pn="Folder name" v="gid_output" help="This folder will be created to store the GiD results" />
            <value n="FileLabel" pn="File Label" v="step" values="time,step" dict="time,Time,step,Step" help=""/>
            <value n="OutputControlType" pn="Units used for output frequency" v="step" values="time,step" dict="time,Time (s),step,Steps" help="" update_proc="spdAux::RequestRefresh">
                <dependencies node="../value" actualize="1"/>
            </value>
            <value n="OutputDeltaTime" pn="Time between outputs (s)" v="1.0" help="Output will be printed in intervals of this time" state="[getStateFromXPathValue {string(../value[@n='OutputControlType']/@v)} time]"/>
            <value n="OutputDeltaStep" pn="Time steps between outputs" v="1" help="Output will be printed in intervals of this number of steps" state="[getStateFromXPathValue {string(../value[@n='OutputControlType']/@v)} step]"/>
            <value n="BodyOutput" pn="Body output" v="Yes" values="Yes,No" help="The interior of the volume is printed" />
            <value n="NodeOutput" pn="Node output" v="No" values="Yes,No" help="The nodes are printed as a separate layer" />
            <value n="SkinOutput" pn="Skin output" v="No" values="Yes,No" help="" />
            <value n="GiDPostMode" pn="Result format" v="GiD_PostBinary" values="GiD_PostBinary,GiD_PostAscii,GiD_PostAsciiZipped" dict="GiD_PostBinary,Binary,GiD_PostAscii,Ascii,GiD_PostAsciiZipped,Ascii zipped" help="GiD result file format" />
            <value n="GiDWriteMeshFlag" pn="Write deformed mesh" v="WriteDeformed" values="WriteDeformed,WriteUndeformed" dict="WriteDeformed,Write deformed,WriteUndeformed, Write undeformed" help="Write the GiD deformed or undeformed mesh"/>
            <value n="GiDWriteConditionsFlag" pn="Write conditions" v="WriteConditions" values="WriteConditions,WriteElementsOnly,WriteConditionsOnly" dict="WriteConditions,Write conditions,WriteElementsOnly,Write elements only,WriteConditionsOnly,Write conditions only" help="Write the conditions or only element to the GiD result file"/>
            <value n="GiDMultiFileFlag" pn="Result file" v="SingleFile" values="SingleFile,MultipleFiles" dict="SingleFile,Single,MultipleFiles,Multiple" help="Write one GiD result file or multiple files"/>
            <value n="EchoLevel" pn="Verbosity of terminal output" v="0" values="0,1,2,3" help="Verbosity on screen output during process. \n0 -> Low verbosity \n3 -> High verbosity"/>
        </container>
        <container n="CutPlanes" pn="Cut planes" un="CutPlanes" icon="cut" state="[checkStateByUniqueName nDim 3D]" open_window="0">
            <blockdata n='CutPlane' name='CutPlane' editable_name="unique" sequence='1' can_delete_last_item='1' icon="slice">
                <value n="point" pn="Point" fieldtype="vector" dimensions="3" format="%.6g" v="0.0,0.0,0.0" pick_point="1"/>
                <value n="normal" pn="Normal" fieldtype="vector" dimensions="3" format="%.6g" v="0.0,0.0,0.0" pick_point="0"/>
            </blockdata>
        </container>
    </container>
    <container n="VtkOutput" pn="Vtk-Output" un="VtkOutput" state="normal" open="1" open_window="0" icon="results">
        <value n="EnableVtkOutput" pn="Enable output" v="Yes" values="Yes,No" un="EnableVtkOutput" help="Writing output for Vtk or not" />
        <container n="VtkOptions" pn="Options" un="VtkOptions" help="Vtk postprocess options" open_window="1" icon="options" state="[checkStateByUniqueName EnableVtkOutput Yes]">
            <value n="VtkFileFormat" pn="Result format" v="ascii" values="ascii,binary" dict="ascii,Ascii,binary,Binary" help="Vtk result file format" />
            <value n="OutputControlType" pn="Units used for output frequency" v="step" values="time,step" dict="time,Time (s),step,Steps" help="" update_proc="spdAux::RequestRefresh">
                <dependencies node="../value" actualize="1"/>
            </value>
            <value n="OutputDeltaTime" pn="Time between outputs (s)" v="1.0" help="Output will be printed in intervals of this time" state="[getStateFromXPathValue {string(../value[@n='OutputControlType']/@v)} time]"/>
            <value n="OutputDeltaStep" pn="Time steps between outputs" v="1" help="Output will be printed in intervals of this number of steps" state="[getStateFromXPathValue {string(../value[@n='OutputControlType']/@v)} step]"/>

        </container>
    </container>

    <container n="Tracking" pn="Tracking of material points" un="TrackingMP" help="" icon="results" open="1" open_window="0">
        <value n="ActivateTracking" pn="Activate tracking" v="Off" values="Off,On" un="ActivateTracking" help="Tracking is printed in a .txt file">
            <dependencies value="Off" node="../value[@n='position']|../value[@n='tolerance']|../value[@n='output_press']|../value[@n='print_format']" att1="state" v1="hidden"/>
            <dependencies value="On"  node="../value[@n='position']|../value[@n='tolerance']|../value[@n='output_press']|../value[@n='print_format']" att1="state" v1="normal"/>
        </value>
        <value n="position" pn="Initial position" v="0.0,0.0,0.0" fieldtype="vector" help=""/>
        <value n="tolerance" pn="Tolerance" v="0.1" help=""/>
        <value n="output_press" pn="Write pressure" v="No" values="Yes,No" help=""/>
        <value n="print_format" pn="Format" v=".5f" help=""/>
	 </container>

</container>
