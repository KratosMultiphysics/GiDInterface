<?xml version="1.0" encoding="utf-8"?>
<container n="procs" pn="procs" includeContainer="No">
	<proc n='Fixity' args='args'>
	  <![CDATA[
		return "normal"
	  ]]>
	</proc>
		<proc n='MaxGroups' args='args'>
	  <![CDATA[
		set childs [$domNode getElementsByTagName group]
		if {[llength $childs] > 1} {
			foreach group [lrange $childs 1 end] {$group delete}
			gid_groups_conds::actualize_conditions_window
			error "You can only set one part"
		}
	  ]]>
	</proc>
	<proc n='CheckIdOnMyParent' args='args'>
	  <![CDATA[
		set r "hidden"
		set parent [$domNode parent]
		set wantedname [lindex $args 0]
		set wantedvalue [lindex $args 1]
		#W "wantedname $wantedname wantedvalue $wantedvalue"
		foreach v [$parent getElementsByTagName value] {
			if {[$v @n] eq $wantedname} {
				if {[$v @v] eq $wantedvalue} {
					set r "normal"
					break
				} else {
					set r "hidden"
				}
			}
		}
		return $r
	  ]]>
	</proc>
	
	
		 	<proc n='GetSolutionStrategiesSolid' args='args'>
	  <![CDATA[
	  
		set names ""
		set pnames ""
		set solutionType [get_domnode_attribute [$domNode selectNodes [spdAux::getRoute STSoluType]] v]
		set Sols [::Model::GetSolutionStrategies [list "SolutionType" $solutionType] ]
		foreach ss $Sols {
			lappend ids [$ss getName]
			append names [$ss getName] ","
			append pnames [$ss getName] "," [$ss getPublicName] ","
		}
		set names [string range $names 0 end-1]
		set pnames [string range $pnames 0 end-1]
		
		$domNode setAttribute values $names
		if {[$domNode getAttribute v] eq ""} {$domNode setAttribute v [lindex $ids 0]}
		spdAux::RequestRefresh
		return $pnames
	  
	  ]]>
	</proc>
			
    <proc n='GetSolutionStrategiesStructural' args='args'>
	  <![CDATA[
	  
		set names ""
		set pnames ""
        
		set solutionType [get_domnode_attribute [$domNode selectNodes [spdAux::getRoute STSoluType]] v]
        set arguments $args
        lappend arguments "SolutionType" $solutionType
        #W "arguments $arguments"
		set Sols [::Model::GetSolutionStrategies $arguments ]
    set ids [list ]
		foreach ss $Sols {
			lappend ids [$ss getName]
			append names [$ss getName] ","
			append pnames [$ss getName] "," [$ss getPublicName] ","
		}
		set names [string range $names 0 end-1]
		set pnames [string range $pnames 0 end-1]
		
		$domNode setAttribute values $names
			set dv [lindex $ids 0]
			if {[$domNode getAttribute v] eq ""} {$domNode setAttribute v $dv}
			if {[$domNode getAttribute v] ni $ids} {$domNode setAttribute v $dv}
		#spdAux::RequestRefresh
		return $pnames
	  
	  ]]>
	</proc>
	          <proc n='CheckGeometryStructural' args='args'>
          <![CDATA[                
                if {$::Model::SpatialDimension eq "3D"} {return surface,volume} {return surface}                
          ]]>
        </proc>
			  
	<proc n='GetSolutionStrategiesSolid' args='args'>
	  <![CDATA[
	  return [Structural::xml::ProcGetSolutionStrategiesSolid $domNode $args]
	  ]]>
	</proc>
    <proc n='CheckNodalConditionStateStructural' args='args'>
	  <![CDATA[
	  return [Structural::xml::CheckNodalConditionStateStructural $domNode $args]
	  ]]>
	</proc>		
	
    <proc n='CheckNodalConditionStateStructural' args='args'>
	  <![CDATA[
	  return [Structural::xml::ProcCheckNodalConditionStateStructural $domNode $args]
	  ]]>
	</proc>		

</container>